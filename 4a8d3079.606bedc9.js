(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{76:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return m})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return d}));var a=t(3),o=t(8),r=(t(0),t(94)),i={title:"Creating commands"},m={unversionedId:"command-extension/creating-commands",id:"command-extension/creating-commands",isDocsHomePage:!1,title:"Creating commands",description:"Commands represent the main form of interaction that Discord bots have with users. Given you properly configured the command extension, creating commands is a simple and straightforward process.",source:"@site/docs/command-extension/creating-commands.md",slug:"/command-extension/creating-commands",permalink:"/docs/command-extension/creating-commands",editUrl:"https://github.com/Alex1304/botrino/edit/main/website/docs/command-extension/creating-commands.md",version:"current",sidebar:"someSidebar",previous:{title:"Configuration",permalink:"/docs/command-extension/configuration"},next:{title:"Subcommands",permalink:"/docs/command-extension/subcommands"}},c=[{value:"Implementing the <code>Command</code> interface",id:"implementing-the-command-interface",children:[]},{value:"Creating inline commands",id:"creating-inline-commands",children:[]}],l={rightToc:c};function d(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Commands represent the main form of interaction that Discord bots have with users. Given you properly configured the command extension, creating commands is a simple and straightforward process."),Object(r.b)("h2",{id:"implementing-the-command-interface"},"Implementing the ",Object(r.b)("inlineCode",{parentName:"h2"},"Command")," interface"),Object(r.b)("p",null,"All your classes present in your module that implement ",Object(r.b)("inlineCode",{parentName:"p"},"Command")," will automatically be registered. It requires to implement two methods, ",Object(r.b)("inlineCode",{parentName:"p"},"Set<String> aliases()")," and ",Object(r.b)("inlineCode",{parentName:"p"},"Mono<Void> run(CommandContext)"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'package com.example.myproject;\n\nimport botrino.command.Command;\nimport botrino.command.CommandContext;\nimport reactor.core.publisher.Mono;\n\nimport java.util.Set;\n\npublic final class PingCommand implements Command {\n\n    @Override\n    public Set<String> aliases() {\n        return Set.of("ping");\n    }\n\n    @Override\n    public Mono<Void> run(CommandContext ctx) {\n        return ctx.channel()\n                .createMessage("Pong!")\n                .then();\n    }\n}\n')),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"aliases()")," indicates the name(s) of the command to write in chat right after the prefix, there may be more than one. If the set is empty, the command won't be registered."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"run(CommandContext)"),' contains the code of the command itself. Here we are just replying "Pong!" in the same channel the command was sent in.'),Object(r.b)("p",null,"There are many default methods in the ",Object(r.b)("inlineCode",{parentName:"p"},"Command")," interface that you can override to customize different aspects of the command, such as:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"documentation(Translator)"),": allows you to attach a documentation to the command. Useful if you want to make a help command or generate a user manual. The ",Object(r.b)("inlineCode",{parentName:"li"},"Translator")," parameter allows you to adapt the documentation to the language of the user. Details on how to implement this method is documented ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/command-extension/documenting-commands"}),"here"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"privilege()"),": defines a privilege, in other words a requirement that must be fulfilled in order to be allowed to execute the command. Details on how to implement this method is documented ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/command-extension/privileges"}),"here"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"scope()"),": defines where the command can be used. The possible values are: ",Object(r.b)("inlineCode",{parentName:"li"},"Scope.ANYWHERE")," (the command can be used anywhere), ",Object(r.b)("inlineCode",{parentName:"li"},"Scope.DM_ONLY")," (the command only works in private messages), ",Object(r.b)("inlineCode",{parentName:"li"},"Scope.GUILD_ONLY")," (the command only works inside a guild). A command ran outside of its scope will be ignored."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"subcommands()"),": defines subcommands for the command. More details about subcommands can be found ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/command-extension/subcommands"}),"here"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"errorHandler()"),": defines a command-specific error handler, overriding the global error handler if it exists. More details about error handlers can be found ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/command-extension/handling-errors"}),"here"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"rateLimit()"),": defines a rate limit for the command, that is the maximum number of times a command can be used per user within a specific timeframe. More details about rate limiting can be found ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/command-extension/rate-limiting"}),"here"),".")),Object(r.b)("h2",{id:"creating-inline-commands"},"Creating inline commands"),Object(r.b)("p",null,"Implementing the interface isn't the only way to create commands. Another way is to create them inline, via the static factory methods of ",Object(r.b)("inlineCode",{parentName:"p"},"Command"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'var command = Command.of(Set.of("ping"),\n        ctx -> ctx.channel()\n                .createMessage("Pong!")\n                .then());\n\nvar moreComplexCommand = Command.builder(Set.of("hello"),\n        ctx -> ctx.channel()\n                .createMessage("Hello!")\n                .then())\n        .scope(Scope.DM_ONLY)\n        .rateLimit(RateLimit.of(2, Duration.ofSeconds(5)))\n        .build();\n')),Object(r.b)("p",null,"In order to register them, you need to import the ",Object(r.b)("inlineCode",{parentName:"p"},"CommandService")," and call the ",Object(r.b)("inlineCode",{parentName:"p"},"addCommand")," method on it:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'package com.example.myproject;\n\nimport botrino.command.CommandService;\nimport com.github.alex1304.rdi.finder.annotation.RdiFactory;\nimport com.github.alex1304.rdi.finder.annotation.RdiService;\nimport reactor.util.Logger;\nimport reactor.util.Loggers;\n\n@RdiService\npublic final class SampleService {\n\n    @RdiFactory\n    public SampleService(CommandService commandService) {\n        var command = Command.of(Set.of("ping"), ctx ->\n                ctx.channel()\n                        .createMessage("Pong!")\n                        .then());\n        commandService.addCommand(command);\n    }\n}\n')),Object(r.b)("p",null,"Generally, the interface approach will be preferred for top-level commands, and the inline approach will be used more for subcommands."))}d.isMDXComponent=!0},94:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return u}));var a=t(0),o=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=o.a.createContext({}),d=function(e){var n=o.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):m(m({},n),e)),t},s=function(e){var n=d(e.components);return o.a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=o.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),s=d(t),b=a,u=s["".concat(i,".").concat(b)]||s[b]||p[b]||r;return t?o.a.createElement(u,m(m({ref:n},l),{},{components:t})):o.a.createElement(u,m({ref:n},l))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=b;var m={};for(var c in n)hasOwnProperty.call(n,c)&&(m[c]=n[c]);m.originalType=e,m.mdxType="string"==typeof e?e:a,i[1]=m;for(var l=2;l<r;l++)i[l]=t[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);