(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{74:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return m})),t.d(e,"metadata",(function(){return c})),t.d(e,"rightToc",(function(){return d})),t.d(e,"default",(function(){return l}));var a=t(3),o=t(8),i=(t(0),t(95)),r=t(97),m={title:"Documenting commands"},c={unversionedId:"command-extension/documenting-commands",id:"command-extension/documenting-commands",isDocsHomePage:!1,title:"Documenting commands",description:"For users to know how to use your bot, it is very important to provide some documentation on what your commands do. The majority of bots achieve that via a help command, which usually displays a list of commands and detailed description for each of them. After reading this page you will have all resources needed to implement your own help command.",source:"@site/docs/command-extension/documenting-commands.md",slug:"/command-extension/documenting-commands",permalink:"/docs/command-extension/documenting-commands",editUrl:"https://github.com/Alex1304/botrino/edit/main/website/docs/command-extension/documenting-commands.md",version:"current",sidebar:"someSidebar",previous:{title:"Filtering and adapting events",permalink:"/docs/command-extension/filtering-and-adapting-events"},next:{title:"Interactive menus",permalink:"/docs/command-extension/interactive-menus"}},d=[{value:"Defining a documentation for a command",id:"defining-a-documentation-for-a-command",children:[]},{value:"Accessing documentation from other commands",id:"accessing-documentation-from-other-commands",children:[]}],s={rightToc:d};function l(n){var e=n.components,t=Object(o.a)(n,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,t,{components:e,mdxType:"MDXLayout"}),Object(i.b)("p",null,"For users to know how to use your bot, it is very important to provide some documentation on what your commands do. The majority of bots achieve that via a help command, which usually displays a list of commands and detailed description for each of them. After reading this page you will have all resources needed to implement your own help command."),Object(i.b)("h2",{id:"defining-a-documentation-for-a-command"},"Defining a documentation for a command"),Object(i.b)("p",null,"To attach a documentation to a command, override the ",Object(i.b)("inlineCode",{parentName:"p"},"documentation()")," method from ",Object(i.b)("inlineCode",{parentName:"p"},"Command")," (or use the corresponding method in ",Object(i.b)("inlineCode",{parentName:"p"},"Command.Builder")," if you build the command inline):"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'@Override\npublic CommandDocumentation documentation(Translator translator) {\n    return CommandDocumentation.builder()\n            .setSyntax("[command...]")\n            .setDescription("Displays helpful info on commands.")\n            .setBody("Without arguments, gives a list of available commands. Pass a command or a sequence " +\n                    "of subcommands in arguments to get detailed information on that specific command/subcommand.")\n            .build();\n}\n')),Object(i.b)("p",null,"You can specify several fields, which include:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("strong",{parentName:"li"},"syntax"),": indication on the structure of arguments. If you use ",Object(i.b)("inlineCode",{parentName:"li"},"CommandGrammar"),", it is recommended to do ",Object(i.b)("inlineCode",{parentName:"li"},".setSyntax(grammar.toString())"),"."),Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("strong",{parentName:"li"},"description"),": a one-liner description for the command. Will typically be printed next to the command name when listing commands."),Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("strong",{parentName:"li"},"body"),": a more lengthy description which explains more in-depth how the command works. May take several lines."),Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("strong",{parentName:"li"},"flags"),": the details about the flags that are accepted.")),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Use the ",Object(i.b)("inlineCode",{parentName:"p"},"Translator")," parameter of the ",Object(i.b)("inlineCode",{parentName:"p"},"documentation()")," method to adapt the language and externalize the strings of the documentation content."))),Object(i.b)("h2",{id:"accessing-documentation-from-other-commands"},"Accessing documentation from other commands"),Object(i.b)("p",null,"If you want to implement a help command, you need to gather all ",Object(i.b)("inlineCode",{parentName:"p"},"Command")," instances and call ",Object(i.b)("inlineCode",{parentName:"p"},"documentation()")," on them. You can achieve this by injecting the ",Object(i.b)("inlineCode",{parentName:"p"},"CommandService")," and using the ",Object(i.b)("inlineCode",{parentName:"p"},"listCommands()")," method."),Object(i.b)("p",null,"Here is an example of a fully working ",Object(i.b)("inlineCode",{parentName:"p"},"!help")," command, which accepts an argument to view the documentation for a specific command or subcommand. If the argument is not provided, it will list all commands with only their name and description. It throws ",Object(i.b)("inlineCode",{parentName:"p"},"CommandFailedException")," if the command does not exist."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'package com.example.myproject;\n\nimport botrino.api.i18n.Translator;\nimport botrino.api.util.Markdown;\nimport botrino.command.Command;\nimport botrino.command.CommandContext;\nimport botrino.command.CommandFailedException;\nimport botrino.command.CommandService;\nimport botrino.command.annotation.Alias;\nimport botrino.command.annotation.TopLevelCommand;\nimport botrino.command.doc.CommandDocumentation;\nimport botrino.command.grammar.CommandGrammar;\nimport com.github.alex1304.rdi.finder.annotation.RdiFactory;\nimport com.github.alex1304.rdi.finder.annotation.RdiService;\nimport reactor.core.publisher.Mono;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n\nimport static java.util.function.Predicate.not;\n\n@Alias("help")\n@TopLevelCommand\n@RdiService\npublic class HelpCommand implements Command {\n\n    private final CommandGrammar<Args> grammar = CommandGrammar.builder()\n            .nextArgument("command")\n            .setVarargs(true)\n            .build(Args.class);\n\n    private final CommandService commandService;\n\n    @RdiFactory\n    public HelpCommand(CommandService commandService) {\n        this.commandService = commandService;\n    }\n\n    private static String formatDocForCommand(Command cmd, CommandContext ctx, Args args) {\n        var doc = cmd.documentation(ctx);\n        var sb = new StringBuilder();\n        sb.append("```\\n");\n        sb.append(ctx.getPrefixUsed());\n        sb.append(String.join(" ", args.command));\n        sb.append(\' \');\n        sb.append(doc.getSyntax());\n        sb.append("\\n```\\n");\n        sb.append(doc.getDescription());\n        sb.append("\\n\\n");\n        sb.append(doc.getBody());\n        sb.append(\'\\n\');\n        if (!doc.getFlags().isEmpty()) {\n            sb.append("__Flags:__\\n");\n            for (var flagInfo : doc.getFlags()) {\n                sb.append(\'`\');\n                sb.append(flagInfo.getValueFormat());\n                sb.append("`: ");\n                sb.append(flagInfo.getDescription());\n                sb.append(\'\\n\');\n            }\n        }\n        return sb.toString();\n    }\n\n    @Override\n    public Mono<Void> run(CommandContext ctx) {\n        return grammar.resolve(ctx).flatMap(args -> {\n            if (args.command.isEmpty()) {\n                // List all top-level commands\n                return ctx.channel().createMessage(commandService.listCommands().stream()\n                        .map(cmd -> {\n                            var aliases = String.join("|", cmd.aliases());\n                            var desc = Optional.of(cmd.documentation(ctx).getDescription())\n                                    .filter(not(String::isEmpty))\n                                    .orElseGet(() -> Markdown.italic("No description"));\n                            return Markdown.code(ctx.getPrefixUsed() + aliases) + ": " + desc;\n                        })\n                        .collect(Collectors.joining("\\n")));\n            }\n            // Send documentation for specific command\n            var cmdFound = commandService.getCommandAt(args.command.get(0),\n                    args.command.subList(1, args.command.size()).toArray(new String[0]));\n            return cmdFound.map(cmd -> ctx.channel().createMessage(formatDocForCommand(cmd, ctx, args)))\n                    .orElseGet(() -> Mono.error(new CommandFailedException("Command not found")));\n        }).then();\n    }\n\n    @Override\n    public CommandDocumentation documentation(Translator translator) {\n        return CommandDocumentation.builder()\n                .setSyntax(grammar.toString())\n                .setDescription("Displays helpful info on commands.")\n                .setBody("Without arguments, gives a list of available commands. Pass a command or a sequence " +\n                        "of subcommands in arguments to get detailed information on that specific command/subcommand.")\n                .build();\n    }\n\n    private static final class Args {\n        private List<String> command;\n    }\n}\n')),Object(i.b)("p",null,"The command above in action:"),Object(i.b)("img",{src:Object(r.a)("img/doc_example.png"),alt:""}))}l.isMDXComponent=!0},95:function(n,e,t){"use strict";t.d(e,"a",(function(){return l})),t.d(e,"b",(function(){return b}));var a=t(0),o=t.n(a);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function m(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},i=Object.keys(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var d=o.a.createContext({}),s=function(n){var e=o.a.useContext(d),t=e;return n&&(t="function"==typeof n?n(e):m(m({},e),n)),t},l=function(n){var e=s(n.components);return o.a.createElement(d.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return o.a.createElement(o.a.Fragment,{},e)}},u=o.a.forwardRef((function(n,e){var t=n.components,a=n.mdxType,i=n.originalType,r=n.parentName,d=c(n,["components","mdxType","originalType","parentName"]),l=s(t),u=a,b=l["".concat(r,".").concat(u)]||l[u]||p[u]||i;return t?o.a.createElement(b,m(m({ref:e},d),{},{components:t})):o.a.createElement(b,m({ref:e},d))}));function b(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var i=t.length,r=new Array(i);r[0]=u;var m={};for(var c in e)hasOwnProperty.call(e,c)&&(m[c]=e[c]);m.originalType=n,m.mdxType="string"==typeof n?n:a,r[1]=m;for(var d=2;d<i;d++)r[d]=t[d];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},97:function(n,e,t){"use strict";t.d(e,"b",(function(){return i})),t.d(e,"a",(function(){return r}));var a=t(21),o=t(99);function i(){var n=Object(a.default)().siteConfig,e=(n=void 0===n?{}:n).baseUrl,t=void 0===e?"/":e,i=n.url;return{withBaseUrl:function(n,e){return function(n,e,t,a){var i=void 0===a?{}:a,r=i.forcePrependBaseUrl,m=void 0!==r&&r,c=i.absolute,d=void 0!==c&&c;if(!t)return t;if(t.startsWith("#"))return t;if(Object(o.b)(t))return t;if(m)return e+t;var s=t.startsWith(e)?t:e+t.replace(/^\//,"");return d?n+s:s}(i,t,n,e)}}}function r(n,e){return void 0===e&&(e={}),(0,i().withBaseUrl)(n,e)}},99:function(n,e,t){"use strict";function a(n){return!0===/^(\w*:|\/\/)/.test(n)}function o(n){return void 0!==n&&!a(n)}t.d(e,"b",(function(){return a})),t.d(e,"a",(function(){return o}))}}]);