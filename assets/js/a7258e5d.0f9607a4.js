"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[865],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return u}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(t),u=i,h=d["".concat(c,".").concat(u)]||d[u]||m[u]||o;return t?r.createElement(h,a(a({ref:n},p),{},{components:t})):r.createElement(h,a({ref:n},p))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5150:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return m}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],s={title:"Privileges"},c={unversionedId:"command-extension/privileges",id:"command-extension/privileges",isDocsHomePage:!1,title:"Privileges",description:"Another common use case when making commands is to be able to restrict access to some commands that should not be used by everyone. The Privilege API provides a way to conveniently implement these kind of restrictions.",source:"@site/docs/command-extension/privileges.md",sourceDirName:"command-extension",slug:"/command-extension/privileges",permalink:"/docs/command-extension/privileges",editUrl:"https://github.com/Alex1304/botrino/edit/main/website/docs/command-extension/privileges.md",version:"current",frontMatter:{title:"Privileges"},sidebar:"someSidebar",previous:{title:"Subcommands",permalink:"/docs/command-extension/subcommands"},next:{title:"Cooldowns",permalink:"/docs/command-extension/cooldowns"}},l=[{value:"The <code>Privilege</code> interface",id:"the-privilege-interface",children:[]},{value:"Privilege presets",id:"privilege-presets",children:[]},{value:"Composing privileges",id:"composing-privileges",children:[]}],p={toc:l};function m(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Another common use case when making commands is to be able to restrict access to some commands that should not be used by everyone. The Privilege API provides a way to conveniently implement these kind of restrictions."),(0,o.kt)("h2",{id:"the-privilege-interface"},"The ",(0,o.kt)("inlineCode",{parentName:"h2"},"Privilege")," interface"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Privilege")," is a functional interface that is in charge of checking if access to the command is granted for a specific context. If granted, the abstract method of the interface returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"Mono")," that completes empty, which signals that the command can be run normally. If not granted, the returned ",(0,o.kt)("inlineCode",{parentName:"p"},"Mono")," is expected to emit ",(0,o.kt)("inlineCode",{parentName:"p"},"PrivilegeException")," (or a subclass of this exception), possibly carrying details on the reason of the failure. In this case, the command execution will be cancelled."),(0,o.kt)("p",null,"An instance of this interface can be provided via a lambda expression, and can be attached to a command by overriding the ",(0,o.kt)("inlineCode",{parentName:"p"},"privilege()")," method of ",(0,o.kt)("inlineCode",{parentName:"p"},"Command")," (or the corresponding method in ",(0,o.kt)("inlineCode",{parentName:"p"},"Command.Builder"),'). The example below defines a privilege which only grants users whose username starts with "A":'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@Override\npublic Privilege privilege() {\n    return ctx -> Mono.justOrEmpty(ctx.event().getMessage().getAuthor())\n            .filter(author -> author.getUsername().startsWith("A"))\n            .switchIfEmpty(Mono.error(PrivilegeException::new))\n            .then();\n}\n')),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Handling ",(0,o.kt)("inlineCode",{parentName:"p"},"PrivilegeException")," (for example to display a user-friendly message) is documented on the ",(0,o.kt)("a",{parentName:"p",href:"/docs/command-extension/handling-errors"},"Handling Errors")," page."))),(0,o.kt)("h2",{id:"privilege-presets"},"Privilege presets"),(0,o.kt)("p",null,"In most cases, checking if access to a command is granted will simply consist of checking if the user has a particular role or a particular permission in the guild. You can use one of the static methods of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Privileges")," class instead of implementing that yourself:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"@Override\npublic Privilege privilege() {\n    return Privileges.checkPermissions(perms -> perms.contains(ADMINISTRATOR));\n}\n")),(0,o.kt)("p",null,"Check out the ",(0,o.kt)("a",{parentName:"p",href:"https://javadoc.io/doc/com.alex1304.botrino/botrino-command/latest/botrino.command/botrino/command/privilege/Privileges.html"},"Javadoc for the ",(0,o.kt)("inlineCode",{parentName:"a"},"Privileges")," class")," for more presets like this one."),(0,o.kt)("h2",{id:"composing-privileges"},"Composing privileges"),(0,o.kt)("p",null,"You can compose several ",(0,o.kt)("inlineCode",{parentName:"p"},"Privilege")," instances by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"and()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"or()")," methods:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"@Override\npublic Privilege privilege() {\n    return Privileges.checkRoles(roles -> !roles.isEmpty())\n            .or(Privileges.guildOwner());\n}\n")),(0,o.kt)("p",null,'This code means "Grant if the user has at least one role OR if they are the owner of the server".'))}m.isMDXComponent=!0}}]);