"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[320],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return u}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):m(m({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=c(t),u=o,h=p["".concat(s,".").concat(u)]||p[u]||l[u]||i;return t?a.createElement(h,m(m({ref:n},d),{},{components:t})):a.createElement(h,m({ref:n},d))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,m=new Array(i);m[0]=p;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:o,m[1]=r;for(var c=2;c<i;c++)m[c]=t[c];return a.createElement.apply(null,m)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3652:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return r},metadata:function(){return s},toc:function(){return c},default:function(){return l}});var a=t(7462),o=t(3366),i=(t(7294),t(3905)),m=["components"],r={title:"Subcommands"},s={unversionedId:"command-extension/subcommands",id:"command-extension/subcommands",isDocsHomePage:!1,title:"Subcommands",description:"A common use case when working with commands is to be able to split the logic of the command into multiple pieces. Typically, the first argument is used to route the execution flow of a command to a specific piece of code. It might also be needed to give this piece of code its own settings that might differ from the parent command, such as a custom scope or permission. Subcommands are made to enable that.",source:"@site/docs/command-extension/subcommands.md",sourceDirName:"command-extension",slug:"/command-extension/subcommands",permalink:"/docs/command-extension/subcommands",editUrl:"https://github.com/Alex1304/botrino/edit/main/website/docs/command-extension/subcommands.md",version:"current",frontMatter:{title:"Subcommands"},sidebar:"someSidebar",previous:{title:"Input tokenization",permalink:"/docs/command-extension/input-tokenization"},next:{title:"Privileges",permalink:"/docs/command-extension/privileges"}},c=[{value:"Inline subcommands",id:"inline-subcommands",children:[]},{value:"Command classes as subcommands",id:"command-classes-as-subcommands",children:[]},{value:"Subcommand-only commands",id:"subcommand-only-commands",children:[]}],d={toc:c};function l(e){var n=e.components,t=(0,o.Z)(e,m);return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A common use case when working with commands is to be able to split the logic of the command into multiple pieces. Typically, the first argument is used to route the execution flow of a command to a specific piece of code. It might also be needed to give this piece of code its own settings that might differ from the parent command, such as a custom scope or permission. Subcommands are made to enable that."),(0,i.kt)("h2",{id:"inline-subcommands"},"Inline subcommands"),(0,i.kt)("p",null,"To create a subcommand, simply override the ",(0,i.kt)("inlineCode",{parentName:"p"},"Set<Command> subcommands()")," method of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Command")," interface. You can then add your commands inline:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@Override\npublic Set<Command> subcommands() {\n    return Set.of(\n        Command.builder("sub",\n                ctx -> ctx.channel()\n                        .createMessage("This is a subcommand!")\n                        .then())\n                .inheritFrom(this)\n                .build()\n    );\n}\n')),(0,i.kt)("p",null,"If let's say the prefix is ",(0,i.kt)("inlineCode",{parentName:"p"},"!")," and the top level command is named ",(0,i.kt)("inlineCode",{parentName:"p"},"top"),", sending ",(0,i.kt)("inlineCode",{parentName:"p"},"!top sub"),' in chat will make the bot reply with "This is a subcommand!".'),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Mono<Void> run(CommandContext)")," method of the top level command will ",(0,i.kt)("strong",{parentName:"p"},"not")," be run if the subcommand is triggered."))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"inheritFrom(this)")," allows to inherit some settings from the parent command, such as privilege, scope, error handler and cooldown. It won't inherit aliases, action, documentation and subcommands. You are not required to call it if you don't want those properties to be inherited."))),(0,i.kt)("h2",{id:"command-classes-as-subcommands"},"Command classes as subcommands"),(0,i.kt)("p",null,"If the code of your subcommand is quite complex, you may prefer to declare your subcommand by creating a class implementing ",(0,i.kt)("inlineCode",{parentName:"p"},"Command")," instead. The advantage of this approach is that you can easily reuse the subcommand class for more than one top-level command, and write code with the same flexibility as regular commands."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'package com.example.myproject;\n\nimport botrino.command.Command;\nimport botrino.command.CommandContext;\nimport botrino.command.annotation.Alias;\nimport reactor.core.publisher.Mono;\n\nimport java.util.Set;\n\n@Alias("sub")\npublic final class MySubcommand implements Command {\n\n    @Override\n    public Mono<Void> run(CommandContext ctx) {\n        return ctx.channel()\n                .createMessage("This is a subcommand!")\n                .then();\n    }\n}\n')),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Do not use the ",(0,i.kt)("inlineCode",{parentName:"p"},"@TopLevelCommand")," annotation, as we want this command to be a subcommand and not a top-level command."))),(0,i.kt)("p",null,"To register this subcommand, you have two options:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Either instantiate the class yourself:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MyTopLevelCommand.java"',title:'"MyTopLevelCommand.java"'},"@Override\npublic Set<Command> subcommands() {\n    return Set.of(new MySubcommand());\n}\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Or declare the class as a service and inject it in your top-level command (recommended):"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MySubcommand.java" {1}',title:'"MySubcommand.java"',"{1}":!0},'@RdiService\n@Alias("sub")\npublic final class MySubcommand implements Command {\n    // ...\n')),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="MyTopLevelCommand.java" {1,7}',title:'"MyTopLevelCommand.java"',"{1,7}":!0},'@RdiService\n@Alias("top")\npublic final class MyTopLevelCommand implements Command {\n\n    private final MySubcommand sub;\n\n    @RdiFactory\n    public MyTopLevelCommand(MySubcommand sub) {\n        this.sub = sub;\n    }\n\n    @Override\n    public Set<Command> subcommands() {\n        return Set.of(sub);\n    }\n\n    // ...\n')))),(0,i.kt)("h2",{id:"subcommand-only-commands"},"Subcommand-only commands"),(0,i.kt)("p",null,"If you have a top-level command which can only be used via its subcommands, you can make the top-level command implement ",(0,i.kt)("inlineCode",{parentName:"p"},"ParentCommand")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"Command"),". That interface extends ",(0,i.kt)("inlineCode",{parentName:"p"},"Command")," so it's the same in terms of features, except that the ",(0,i.kt)("inlineCode",{parentName:"p"},"run()")," method has a default implementation which simply throws an invalid syntax error, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"subcommands()")," method is made abstract."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@Alias("top")\npublic final class MyTopLevelCommand implements ParentCommand {\n\n    // No need to override run()\n\n    @Override\n    public Set<Command> subcommands() {\n        return Set.of(\n            Command.builder("sub",\n                    ctx -> ctx.channel()\n                            .createMessage("This is a subcommand!")\n                            .then())\n                    .inheritFrom(this)\n                    .build()\n        );\n    }\n}\n')))}l.isMDXComponent=!0}}]);