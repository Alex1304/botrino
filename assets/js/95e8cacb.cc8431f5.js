"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[644],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),u=i,v=m["".concat(c,".").concat(u)]||m[u]||d[u]||a;return n?r.createElement(v,o(o({ref:t},p),{},{components:n})):r.createElement(v,o({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7075:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],l={title:"Filtering and adapting events"},c={unversionedId:"interaction-library/filtering-and-adapting-events",id:"interaction-library/filtering-and-adapting-events",isDocsHomePage:!1,title:"Filtering and adapting events",description:"Listeners are triggered when an interaction event is received via the Discord gateway. It is possible for you to intervene between the moment the event is received and the moment the listener is triggered. This allows you to drop some events to prevent any command from being executed in a certain context, or to determine which locale to apply according to the event received.",source:"@site/docs/interaction-library/filtering-and-adapting-events.md",sourceDirName:"interaction-library",slug:"/interaction-library/filtering-and-adapting-events",permalink:"/docs/interaction-library/filtering-and-adapting-events",editUrl:"https://github.com/Alex1304/botrino/edit/main/website/docs/interaction-library/filtering-and-adapting-events.md",version:"current",frontMatter:{title:"Filtering and adapting events"},sidebar:"someSidebar",previous:{title:"Handling errors",permalink:"/docs/interaction-library/handling-errors"},next:{title:"Overview",permalink:"/docs/command-extension/overview"}},s=[{value:"The <code>InteractionEventProcessor</code> interface",id:"the-interactioneventprocessor-interface",children:[]}],p={toc:s};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Listeners are triggered when an interaction event is received via the Discord gateway. It is possible for you to intervene between the moment the event is received and the moment the listener is triggered. This allows you to drop some events to prevent any command from being executed in a certain context, or to determine which locale to apply according to the event received."),(0,a.kt)("h2",{id:"the-interactioneventprocessor-interface"},"The ",(0,a.kt)("inlineCode",{parentName:"h2"},"InteractionEventProcessor")," interface"),(0,a.kt)("p",null,"Create a class that implements ",(0,a.kt)("inlineCode",{parentName:"p"},"InteractionEventProcessor"),". If you are using the Botrino framework, it will automatically be set into the interaction service. Otherwise, you need to set it via the builder when constructing your ",(0,a.kt)("inlineCode",{parentName:"p"},"InteractionService"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"final var interactionService = InteractionService.builder(config, gateway)\n        .setEventProcessor(new MyEventProcessor())\n        .build();\n")),(0,a.kt)("p",null,"Here is an example of ",(0,a.kt)("inlineCode",{parentName:"p"},"InteractionEventProcessor")," implementation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package testbot1;\n\nimport botrino.interaction.InteractionEventProcessor;\nimport discord4j.core.event.domain.interaction.InteractionCreateEvent;\nimport discord4j.core.object.entity.channel.GuildMessageChannel;\nimport reactor.core.publisher.Mono;\n\nimport java.util.Locale;\n\npublic final class MyEventProcessor implements InteractionEventProcessor {\n\n    @Override\n    public Mono<Boolean> filter(InteractionCreateEvent event) {\n        return Mono.just(!event.getInteraction().getMember()\n                .map(member -> member.getDisplayName().toLowerCase().contains("ignore me"))\n                .orElse(true));\n    }\n\n    @Override\n    public Mono<Locale> computeLocale(InteractionCreateEvent event) {\n        return event.getInteraction().getChannel()\n                .ofType(GuildMessageChannel.class)\n                .flatMap(guildChannel -> {\n                    if (guildChannel.getName().endsWith("fr")) {\n                        return Mono.just(Locale.FRENCH);\n                    } else if (guildChannel.getName().endsWith("de")) {\n                        return Mono.just(Locale.GERMAN);\n                    } else {\n                        return Mono.empty();\n                    }\n                });\n    }\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"filter(InteractionCreateEvent)")," allows to decide whether to keep or to drop the given ",(0,a.kt)("inlineCode",{parentName:"li"},"InteractionCreateEvent"),'. The default implementation will allow all events. This method can be useful if you want to implement a blacklist system to ban some users from using your bot. In this example, we are filtering out users which username contains the string "ignore me".'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"computeLocale(InteractionCreateEvent)")," allows to adapt the locale according to the event received. In order to keep the default locale, you are expected to return an empty ",(0,a.kt)("inlineCode",{parentName:"li"},"Mono"),". The returned locale will be accessible via the ",(0,a.kt)("inlineCode",{parentName:"li"},"InteractionContext")," (which implements ",(0,a.kt)("inlineCode",{parentName:"li"},"botrino.api.Translator"),", see ",(0,a.kt)("a",{parentName:"li",href:"/docs/api/i18n"},"Internationalization"),"). You will typically store the locale in a database (either per guild or per user) and retrieve it here using the data given by the interaction event. In this example, we are interpreting the suffix of the channel name as the locale, with only French and German being supported. It will use the default locale defined in the ",(0,a.kt)("a",{parentName:"li",href:"/docs/interaction-library/configuration"},"configuration")," in all other cases.")),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Considerations when using the Botrino framework")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("ul",{parentName:"div"},(0,a.kt)("li",{parentName:"ul"},"The implementation class must have a no-arg constructor."),(0,a.kt)("li",{parentName:"ul"},"If more than one implementation of ",(0,a.kt)("inlineCode",{parentName:"li"},"InteractionEventProcessor")," are found, it will result in an error as it is impossible to determine which one to use. If you don't want to remove the extra implementation(s), you can mark one of them with the ",(0,a.kt)("inlineCode",{parentName:"li"},"@Primary")," annotation to lift the ambiguity. You may alternatively use the ",(0,a.kt)("inlineCode",{parentName:"li"},"@Exclude")," annotation if you don't want one implementation to be picked up by Botrino.")))))}d.isMDXComponent=!0}}]);