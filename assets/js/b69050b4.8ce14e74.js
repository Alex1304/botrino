"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[278],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return u}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=m(e,["components","mdxType","originalType","parentName"]),p=l(t),u=r,g=p["".concat(c,".").concat(u)]||p[u]||d[u]||o;return t?a.createElement(g,i(i({ref:n},s),{},{components:t})):a.createElement(g,i({ref:n},s))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=p;var m={};for(var c in n)hasOwnProperty.call(n,c)&&(m[c]=n[c]);m.originalType=e,m.mdxType="string"==typeof e?e:r,i[1]=m;for(var l=2;l<o;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1739:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return m},metadata:function(){return c},toc:function(){return l},default:function(){return d}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=["components"],m={title:"Overview"},c={unversionedId:"command-extension/overview",id:"command-extension/overview",isDocsHomePage:!1,title:"Overview",description:"This extension has been deprecated in favor of the new interaction library, which supports the new application commands and interaction API of Discord.",source:"@site/docs/command-extension/overview.md",sourceDirName:"command-extension",slug:"/command-extension/overview",permalink:"/docs/command-extension/overview",editUrl:"https://github.com/Alex1304/botrino/edit/main/website/docs/command-extension/overview.md",version:"current",frontMatter:{title:"Overview"},sidebar:"someSidebar",previous:{title:"Filtering and adapting events",permalink:"/docs/interaction-library/filtering-and-adapting-events"},next:{title:"Configuration",permalink:"/docs/command-extension/configuration"}},l=[{value:"Features",id:"features",children:[]},{value:"Code examples",id:"code-examples",children:[]},{value:"Getting started",id:"getting-started",children:[]}],s={toc:l};function d(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"This extension has been deprecated in favor of the new ",(0,o.kt)("a",{parentName:"p",href:"/docs/interaction-library/overview"},"interaction library"),", which supports the new application commands and interaction API of Discord."))),(0,o.kt)("h2",{id:"features"},"Features"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Register unlimited commands"),(0,o.kt)("li",{parentName:"ul"},"Message tokenization into arguments and flags"),(0,o.kt)("li",{parentName:"ul"},"Apply a grammar to command arguments to conveniently convert them into actual Java types, supporting required, optional, and varying arguments"),(0,o.kt)("li",{parentName:"ul"},"Unlimited subcommands"),(0,o.kt)("li",{parentName:"ul"},"Attach a documentation to all your commands and subcommands"),(0,o.kt)("li",{parentName:"ul"},"Define privileges for each command with your own rules"),(0,o.kt)("li",{parentName:"ul"},"Cooldowns"),(0,o.kt)("li",{parentName:"ul"},"Global and per-command error handling"),(0,o.kt)("li",{parentName:"ul"},"Process message create events to filter them or to adapt prefix and language"),(0,o.kt)("li",{parentName:"ul"},"Interactive menus")),(0,o.kt)("h2",{id:"code-examples"},"Code examples"),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The examples below make use of translated strings, they are assumed to exist in properties files as described in ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/i18n"},"this page"),"."))),(0,o.kt)("p",null,"A basic ",(0,o.kt)("inlineCode",{parentName:"p"},"!ping")," command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'package com.example.myproject;\n\nimport botrino.command.Command;\nimport botrino.command.CommandContext;\nimport botrino.command.annotation.Alias;\nimport botrino.command.annotation.TopLevelCommand;\nimport reactor.core.publisher.Mono;\n\nimport java.util.Set;\n\n@TopLevelCommand\n@Alias("ping")\npublic final class PingCommand implements Command {\n\n    @Override\n    public Mono<Void> run(CommandContext ctx) {\n        return ctx.channel()\n                .createMessage(ctx.translate(Strings.APP, "ping"))\n                .then();\n    }\n}\n')),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"!sendword <word> <count> [channels...]")," command that sends a word ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," times in each of the specified channels. Requires ",(0,o.kt)("inlineCode",{parentName:"p"},"ADMINISTRATOR")," permission and may be used at most once every 1 minute:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'package com.example.myproject;\n\nimport botrino.command.Command;\nimport botrino.command.CommandContext;\nimport botrino.command.annotation.Alias;\nimport botrino.command.annotation.TopLevelCommand;\nimport botrino.command.grammar.ArgumentMapper;\nimport botrino.command.grammar.CommandGrammar;\nimport botrino.command.privilege.Privilege;\nimport botrino.command.privilege.Privileges;\nimport botrino.command.cooldown.Cooldown;\nimport discord4j.core.object.entity.channel.GuildChannel;\nimport discord4j.core.object.entity.channel.GuildMessageChannel;\nimport discord4j.rest.util.Permission;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\nimport java.time.Duration;\nimport java.util.List;\n\n@TopLevelCommand\n@Alias("sendword")\npublic final class SendWordCommand implements Command {\n\n    private final CommandGrammar<Args> grammar = CommandGrammar.builder()\n            .nextArgument("word")\n            .nextArgument("count", ArgumentMapper.asInteger())\n            .nextArgument("channels", ArgumentMapper.asGuildChannel())\n            .setVarargs(true)\n            .build(Args.class);\n\n    @Override\n    public Mono<Void> run(CommandContext ctx) {\n        return grammar.resolve(ctx)\n                .flatMap(args -> Flux.fromIterable(args.channels)\n                        .ofType(GuildMessageChannel.class)\n                        .flatMap(channel -> Flux.range(0, args.count)\n                                .flatMap(__ -> channel.createMessage(args.word))\n                                .then())\n                        .then());\n    }\n\n    @Override\n    public Cooldown cooldown() {\n        return Cooldown.of(1, Duration.ofMinutes(1));\n    }\n\n    @Override\n    public Privilege privilege() {\n        return Privileges.checkPermissions(\n                ctx -> new PrivilegeException(ctx.translate(Strings.APP,\n                        "error_requires_admin")),\n                perms -> perms.contains(Permission.ADMINISTRATOR));\n    }\n\n    private static final class Args {\n        private String word;\n        private int count;\n        private List<GuildChannel> channels;\n    }\n}\n')),(0,o.kt)("h2",{id:"getting-started"},"Getting started"),(0,o.kt)("p",null,"Using the Maven archetype as outlined in Botrino's ",(0,o.kt)("a",{parentName:"p",href:"/docs/getting-started"},"Getting Started guide")," will automatically configure the command extension for you. The section ",(0,o.kt)("a",{parentName:"p",href:"/docs/getting-started#from-a-blank-project"},'"From a blank project"')," explains how to go for a more manual approach, and the guide already shows how to configure the command extension. Simply make sure to include the ",(0,o.kt)("inlineCode",{parentName:"p"},"botrino-command")," artifact in your project dependencies and to add ",(0,o.kt)("inlineCode",{parentName:"p"},"requires botrino.command;")," in your ",(0,o.kt)("inlineCode",{parentName:"p"},"module-info.java"),". Then make sure to add to following minimal contents to your JSON configuration file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "command": {\n        "prefix": "!"\n    }\n}\n')),(0,o.kt)("p",null,"Specify the command prefix you want for your bot here. The ",(0,o.kt)("inlineCode",{parentName:"p"},'"command"')," property should be at the root of your JSON, alongside with ",(0,o.kt)("inlineCode",{parentName:"p"},'"bot"')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'"i18n"'),". The full reference for the configuration of the command extension can be found ",(0,o.kt)("a",{parentName:"p",href:"/docs/command-extension/configuration"},"in the next page"),"."))}d.isMDXComponent=!0}}]);