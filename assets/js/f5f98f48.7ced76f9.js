"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[412],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return u}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=m(e,["components","mdxType","originalType","parentName"]),p=l(t),u=i,h=p["".concat(s,".").concat(u)]||p[u]||d[u]||o;return t?a.createElement(h,r(r({ref:n},c),{},{components:t})):a.createElement(h,r({ref:n},c))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=p;var m={};for(var s in n)hasOwnProperty.call(n,s)&&(m[s]=n[s]);m.originalType=e,m.mdxType="string"==typeof e?e:i,r[1]=m;for(var l=2;l<o;l++)r[l]=t[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1420:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return m},metadata:function(){return s},toc:function(){return l},default:function(){return d}});var a=t(7462),i=t(3366),o=(t(7294),t(3905)),r=["components"],m={title:"Creating commands"},s={unversionedId:"interaction-library/creating-commands",id:"interaction-library/creating-commands",isDocsHomePage:!1,title:"Creating commands",description:"Commands represent the main form of interaction that Discord bots have with users. Creating commands is a simple and straightforward process, with the ability to customize different aspects of them.",source:"@site/docs/interaction-library/creating-commands.md",sourceDirName:"interaction-library",slug:"/interaction-library/creating-commands",permalink:"/docs/interaction-library/creating-commands",editUrl:"https://github.com/Alex1304/botrino/edit/main/website/docs/interaction-library/creating-commands.md",version:"current",frontMatter:{title:"Creating commands"},sidebar:"someSidebar",previous:{title:"Configuration",permalink:"/docs/interaction-library/configuration"},next:{title:"Acknowledging interactions",permalink:"/docs/interaction-library/acknowledging-interactions"}},l=[{value:"Chat input (aka &quot;slash&quot;) commands",id:"chat-input-aka-slash-commands",children:[{value:"Basic command",id:"basic-command",children:[]},{value:"Command options",id:"command-options",children:[]},{value:"Subcommands and subcommand groups",id:"subcommands-and-subcommand-groups",children:[]}]},{value:"Context menu commands",id:"context-menu-commands",children:[]},{value:"Commands as a service",id:"commands-as-a-service",children:[]}],c={toc:l};function d(e){var n=e.components,t=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Commands represent the main form of interaction that Discord bots have with users. Creating commands is a simple and straightforward process, with the ability to customize different aspects of them."),(0,o.kt)("h2",{id:"chat-input-aka-slash-commands"},'Chat input (aka "slash") commands'),(0,o.kt)("h3",{id:"basic-command"},"Basic command"),(0,o.kt)("p",null,"A slash command is a command that is triggered when the user sends ",(0,o.kt)("inlineCode",{parentName:"p"},"/command-name"),' in chat. In the library, they are called "chat input commands".'),(0,o.kt)("p",null,"Here is an example of a ",(0,o.kt)("inlineCode",{parentName:"p"},"/ping"),' command that makes the bot reply with "Pong!":'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'package testbot1;\n\nimport botrino.interaction.annotation.ChatInputCommand;\nimport botrino.interaction.listener.ChatInputInteractionListener;\nimport botrino.interaction.context.ChatInputInteractionContext;\nimport org.reactivestreams.Publisher;\n\n@ChatInputCommand(name = "ping", description = "Pings the bot to check if it is alive.")\npublic final class PingCommand implements ChatInputInteractionListener {\n\n    @Override\n    public Publisher<?> run(ChatInputInteractionContext ctx) {\n        return ctx.event().createFollowup("Pong!");\n    }\n}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A chat input command must have a ",(0,o.kt)("inlineCode",{parentName:"li"},"@ChatInputCommand")," annotation that contains the meta-information required by Discord (name of the command, description, defaultPermission, etc), and must implement the ",(0,o.kt)("inlineCode",{parentName:"li"},"ChatInputInteractionListener")," interface."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"run")," method accepts a ",(0,o.kt)("inlineCode",{parentName:"li"},"ChatInputInteractionContext")," that holds contextual information on the command being executed, such as the original ",(0,o.kt)("inlineCode",{parentName:"li"},"ChatInputInteractionEvent"),", the ",(0,o.kt)("inlineCode",{parentName:"li"},"MessageChannel")," where the interaction happened, the ",(0,o.kt)("inlineCode",{parentName:"li"},"User")," who initiated the interaction, and a ",(0,o.kt)("inlineCode",{parentName:"li"},"Locale")," that may have been adapted to the target user (see ",(0,o.kt)("a",{parentName:"li",href:"/docs/interaction-library/filtering-and-adapting-events"},"Filtering and adapting events"),")."),(0,o.kt)("li",{parentName:"ul"},"Events are automatically acknowledged by default, so you can directly call ",(0,o.kt)("inlineCode",{parentName:"li"},"createFollowup()")," without using ",(0,o.kt)("inlineCode",{parentName:"li"},"deferReply()")," first (",(0,o.kt)("inlineCode",{parentName:"li"},"reply()")," will not work unless you disable automatic acknowledgment, see ",(0,o.kt)("a",{parentName:"li",href:"/docs/interaction-library/acknowledging-interactions"},"Acknowledging Interactions"),")")),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you are using the Botrino framework, you have nothing else to do, the command will be automatically recognized and registered. Otherwise, you need to manually register it into the ",(0,o.kt)("inlineCode",{parentName:"p"},"InteractionService")," like this:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},"interactionService.registerChatInputCommand(new PingCommand());\n")))),(0,o.kt)("h3",{id:"command-options"},"Command options"),(0,o.kt)("p",null,"A command may accept one or many options, whether they are required or optional. The library provides ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatInputCommandGrammar")," that allows to inject the option values into the fields of a class that is going to be instantiated when the command is executed. Here is an example of a command using options:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'package testbot1;\n\nimport botrino.interaction.annotation.ChatInputCommand;\nimport botrino.interaction.context.ChatInputInteractionContext;\nimport botrino.interaction.grammar.ChatInputCommandGrammar;\nimport botrino.interaction.listener.ChatInputInteractionListener;\nimport discord4j.core.object.command.ApplicationCommandOption;\nimport discord4j.discordjson.json.ApplicationCommandOptionData;\nimport org.reactivestreams.Publisher;\n\nimport java.util.List;\n\n@ChatInputCommand(name = "options", description = "Option testing")\npublic class OptionsCommand implements ChatInputInteractionListener {\n\n    private final ChatInputCommandGrammar<Options> grammar = ChatInputCommandGrammar.of(Options.class);\n\n    @Override\n    public Publisher<?> run(ChatInputInteractionContext ctx) {\n        return grammar.resolve(ctx.event()).flatMap(options -> ctx.event()\n                .createFollowup("Value of `my-string`: " + options.myString));\n    }\n\n    @Override\n    public List<ApplicationCommandOptionData> options() {\n        return grammar.toOptions();\n    }\n\n    private static class Options {\n        @ChatInputCommandGrammar.Option(\n                type = ApplicationCommandOption.Type.STRING,\n                name = "my-string",\n                description = "The string argument",\n                required = true,\n                choices = {\n                        @ChatInputCommandGrammar.Choice(name = "Choice 1", stringValue = "1"),\n                        @ChatInputCommandGrammar.Choice(name = "Choice 2", stringValue = "2"),\n                        @ChatInputCommandGrammar.Choice(name = "Choice 3", stringValue = "3")\n                }\n        )\n        String myString;\n    }\n}\n')),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a new class that declares the fields in which you want to inject the option values. It is recommended to use an internal class for better code readability, unless you are re-using the same class for several commands. The class must have a no-arg contructor, and must be declared ",(0,o.kt)("inlineCode",{parentName:"li"},"static")," if internal. The fields may be ",(0,o.kt)("inlineCode",{parentName:"li"},"private"),", but you can also omit the access modifier to avoid IDE warnings about the field never being assigned a value."),(0,o.kt)("li",{parentName:"ol"},"Use the annotation ",(0,o.kt)("inlineCode",{parentName:"li"},"@ChatInputCommandGrammar.Option")," on the field to declare the properties of the option (the type, the name, the description, whether they are required or not, and the array of value choices, if any)."),(0,o.kt)("li",{parentName:"ol"},"Create a new ",(0,o.kt)("inlineCode",{parentName:"li"},"ChatInputCommandGrammar")," and pass the class to the ",(0,o.kt)("inlineCode",{parentName:"li"},".of()")," method. You only need to instantiate once, rather than on each command execution."),(0,o.kt)("li",{parentName:"ol"},"In the ",(0,o.kt)("inlineCode",{parentName:"li"},"run(ChatInputInteractionContext)")," method, call the ",(0,o.kt)("inlineCode",{parentName:"li"},"resolve(ChatInputInteractionEvent)")," method which will read the options, instantiate the class and inject the values in the annotated fields. You can then use the object to conveniently access the values, as show in the example above."),(0,o.kt)("li",{parentName:"ol"},"Override the ",(0,o.kt)("inlineCode",{parentName:"li"},"options()")," method from ",(0,o.kt)("inlineCode",{parentName:"li"},"ChatInputInteractionListener")," and make it return ",(0,o.kt)("inlineCode",{parentName:"li"},"ChatInputCommandGrammar#toOptions()"),".")),(0,o.kt)("p",null,"For reference, here is a table associating each ",(0,o.kt)("inlineCode",{parentName:"p"},"ApplicationCommandOption.Type")," with the type of the field carrying the annotation:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Option type"),(0,o.kt)("th",{parentName:"tr",align:null},"Type of annotated field"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"STRING")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"java.lang.String"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"INTEGER")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"java.lang.Long")," (primitive ",(0,o.kt)("inlineCode",{parentName:"td"},"long")," may be used only if ",(0,o.kt)("inlineCode",{parentName:"td"},"required = true"),")")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"NUMBER")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"java.lang.Double")," (primitive ",(0,o.kt)("inlineCode",{parentName:"td"},"double")," may be used only if ",(0,o.kt)("inlineCode",{parentName:"td"},"required = true"),")")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"BOOLEAN")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"java.lang.Boolean")," (primitive ",(0,o.kt)("inlineCode",{parentName:"td"},"boolean")," may be used only if ",(0,o.kt)("inlineCode",{parentName:"td"},"required = true"),")")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"USER")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"discord4j.core.object.entity.User")," (or ",(0,o.kt)("inlineCode",{parentName:"td"},"discord4j.core.object.entity.Member")," if in a guild)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"CHANNEL")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"discord4j.core.object.entity.channel.Channel"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"ROLE")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"discord4j.core.object.entity.Role"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"MENTIONABLE")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"discord4j.common.util.Snowflake"))))),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Optional options will be filled with ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," if not specified by the user, which means you cannot use primitive types for ",(0,o.kt)("inlineCode",{parentName:"p"},"INTEGER"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"NUMBER")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"BOOLEAN")," if ",(0,o.kt)("inlineCode",{parentName:"p"},"required = false"),", otherwise you will get ",(0,o.kt)("inlineCode",{parentName:"p"},"NullPointerException"),"s."))),(0,o.kt)("h3",{id:"subcommands-and-subcommand-groups"},"Subcommands and subcommand groups"),(0,o.kt)("p",null,"Discord allows to create subcommands and subcommand groups to help in organizing the logic of a complex command. Here is an example of a command using subcommands and subcommand groups:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@ChatInputCommand(\n        name = "nest",\n        description = "Subcommand testing",\n        subcommands = {\n                @Subcommand(name = "sub1", description = "Subcommand 1", listener = NestCommand.Sub1.class),\n                @Subcommand(name = "sub2", description = "Subcommand 2", listener = NestCommand.Sub2.class)\n        },\n        subcommandGroups = {\n                @SubcommandGroup(name = "group1", description = "Group 1", subcommands = {\n                        @Subcommand(name = "sub", description = "Subcommand", listener = NestCommand.G1Sub.class)\n                })\n        }\n)\npublic final class NestCommand {\n\n    public static final class Sub1 implements ChatInputInteractionListener {\n\n        @Override\n        public Publisher<?> run(ChatInputInteractionContext ctx) {\n            return ctx.event().createFollowup("sub1: pong!");\n        }\n    }\n\n    public static final class Sub2 implements ChatInputInteractionListener {\n\n        @Override\n        public Publisher<?> run(ChatInputInteractionContext ctx) {\n            return ctx.event().createFollowup("sub2: pong!");\n        }\n    }\n\n    public static final class G1Sub implements ChatInputInteractionListener {\n\n        @Override\n        public Publisher<?> run(ChatInputInteractionContext ctx) {\n            return ctx.event().createFollowup("group1 sub: pong!");\n        }\n    }\n}\n')),(0,o.kt)("p",null,"Here are the notable differences:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The class carrying the ",(0,o.kt)("inlineCode",{parentName:"li"},"@ChatInputCommand")," annotation no longer implements ",(0,o.kt)("inlineCode",{parentName:"li"},"ChatInputInteractionListener"),". Indeed, as per Discord's documentation a base command becomes unusable if subcommands are present."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"@ChatInputCommand")," specifies an array of ",(0,o.kt)("inlineCode",{parentName:"li"},"@Subcommand")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"@SubcommandGroup")," with their own name and description."),(0,o.kt)("li",{parentName:"ul"},"Subcommands specify the class implementing ",(0,o.kt)("inlineCode",{parentName:"li"},"ChatInputInteractionListener")," that is going to handle them. In this example they are internal classes, but they can as well be external.")),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Here is how you manually register a command containing subcommands when you control the instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"InteractionService"),":"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},"interactionService.registerChatInputCommand(new NestCommand(), List.of(\n        new NestCommand.Sub1(),\n        new NestCommand.Sub2(),\n        new NestCommand.G1Sub()\n));\n")))),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you are using the Botrino framework, the subcommand classes must either have a public no-arg constructor or be declared as a service. If the classes are internal, they must be ",(0,o.kt)("inlineCode",{parentName:"p"},"static"),"."))),(0,o.kt)("h2",{id:"context-menu-commands"},"Context menu commands"),(0,o.kt)("p",null,"Discord currently support two types of context menu commands, one on messages and one on users. It works the same as chat input commands, but you need to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"@MessageCommand")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@UserCommand")," annotations with the ",(0,o.kt)("inlineCode",{parentName:"p"},"MessageInteractionListener")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"UserInteractionListener")," interfaces, respectively."),(0,o.kt)("p",null,"Context menu commands are actually less complex than chat input ones, since there is no description, no options, no subcommands... Only a name and a run method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'package testbot1;\n\nimport botrino.interaction.annotation.UserCommand;\nimport botrino.interaction.context.UserInteractionContext;\nimport botrino.interaction.listener.UserInteractionListener;\nimport org.reactivestreams.Publisher;\n\n@UserCommand("Fight")\npublic final class FightCommand implements UserInteractionListener {\n\n    @Override\n    public Publisher<?> run(UserInteractionContext ctx) {\n        return ctx.event().createFollowup("You are fighting <@" +\n                ctx.event().getTargetId().asString() + ">");\n    }\n}\n')),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you need to do manual registration, it happens via ",(0,o.kt)("inlineCode",{parentName:"p"},"InteractionService#registerMessageCommand(MessageInteractionListener)")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"InteractionService#registerUserCommand(MessageInteractionListener)"),":"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-java"},"interactionService.registerUserCommand(new FightCommand());\n")))),(0,o.kt)("h2",{id:"commands-as-a-service"},"Commands as a service"),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The following is only applicable if you are using the Botrino framework. See ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/working-with-services"},"Working with services"),"."))),(0,o.kt)("p",null,"Classes implementing commands can themselves be declared as services without any issues. For example if you need to access the ",(0,o.kt)("inlineCode",{parentName:"p"},"ConfigContainer")," in your command, you can do this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'package testbot1;\n\nimport botrino.api.config.ConfigContainer;\nimport botrino.api.config.object.BotConfig;\nimport botrino.interaction.annotation.ChatInputCommand;\nimport botrino.interaction.context.ChatInputInteractionContext;\nimport botrino.interaction.listener.ChatInputInteractionListener;\nimport com.github.alex1304.rdi.finder.annotation.RdiFactory;\nimport com.github.alex1304.rdi.finder.annotation.RdiService;\nimport discord4j.gateway.intent.IntentSet;\nimport org.reactivestreams.Publisher;\n\n@RdiService\n@ChatInputCommand(name = "intents", description = "Displays the intents enabled for this bot.")\npublic final class IntentsCommand implements ChatInputInteractionListener {\n\n    private final long intents;\n\n    @RdiFactory\n    public IntentsCommand(ConfigContainer configContainer) {\n        this.intents = configContainer.get(BotConfig.class)\n                .enabledIntents()\n                .orElse(IntentSet.nonPrivileged().getRawValue());\n    }\n\n    @Override\n    public Publisher<?> run(ChatInputInteractionContext ctx) {\n        return ctx.event().createFollowup("Intents enabled: " + intents);\n    }\n}\n')),(0,o.kt)("p",null,"The command above accesses the values in the ",(0,o.kt)("inlineCode",{parentName:"p"},"config.json")," to get the gateway intents enabled for the bot. You can notice the use of ",(0,o.kt)("inlineCode",{parentName:"p"},"@RdiService")," on top of ",(0,o.kt)("inlineCode",{parentName:"p"},"@ChatInputCommand"),", this works totally fine! Don't forget the ",(0,o.kt)("inlineCode",{parentName:"p"},"@RdiFactory")," to inject the configuration container, and you're ready to run the bot and try out this command."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you declare a command as a service this way, you are allowed to do anything with it like any other service, for example inject it in other services, or set up ",(0,o.kt)("inlineCode",{parentName:"p"},"@RdiFactory")," to be a ",(0,o.kt)("a",{parentName:"p",href:"/docs/api/working-with-services#injecting-a-service-in-a-reactive-static-factory"},"reactive static method")," in case the command needs to perform a reactive task in order to be initialized."))))}d.isMDXComponent=!0}}]);