"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[603],{9720:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>d});var t=i(4848),s=i(8453);const c={title:"Working with services"},r=void 0,a={id:"api/working-with-services",title:"Working with services",description:"Services are certainly what contribute the most in making Botrino a so concise and easy to use framework. You will",source:"@site/docs/api/working-with-services.mdx",sourceDirName:"api",slug:"/api/working-with-services",permalink:"/docs/api/working-with-services",draft:!1,unlisted:!1,editUrl:"https://github.com/Alex1304/botrino/edit/main/website/docs/api/working-with-services.mdx",tags:[],version:"current",frontMatter:{title:"Working with services"},sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"Configuring your bot",permalink:"/docs/api/configuring-your-bot"}},o={},d=[{value:"What is a service?",id:"what-is-a-service",level:2},{value:"How to use services?",id:"how-to-use-services",level:2},{value:"Declaring a service",id:"declaring-a-service",level:3},{value:"Injecting a service in a constructor",id:"injecting-a-service-in-a-constructor",level:3},{value:"Injecting a service in a static factory",id:"injecting-a-service-in-a-static-factory",level:3},{value:"Injecting a service in a reactive static factory",id:"injecting-a-service-in-a-reactive-static-factory",level:3},{value:"Built-in services",id:"built-in-services",level:2},{value:"<code>GatewayDiscordClient</code>",id:"gatewaydiscordclient",level:3},{value:"<code>ConfigContainer</code>",id:"configcontainer",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Services are certainly what contribute the most in making Botrino a so concise and easy to use framework. You will\nhopefully understand why after reading this page introducing services and showing how to use their power to their\nfullest extent."}),"\n",(0,t.jsx)(n.h2,{id:"what-is-a-service",children:"What is a service?"}),"\n",(0,t.jsxs)(n.p,{children:["Services are more or less the same thing\nas ",(0,t.jsx)(n.a,{href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans",children:"beans in Spring"}),". They are Java\nobjects that are instantiated once at the start of your application, and that you can inject everywhere in your app. A\nservice can define dependencies to other services, which are resolved when the service is created."]}),"\n",(0,t.jsxs)(n.p,{children:["As such, the concept of dependency injection (DI) is also used in Botrino. Under the hood, it utilizes\nthe ",(0,t.jsx)(n.a,{href:"https://alex1304.github.io/rdi/docs/intro",children:"RDI library"})," which supports factories returning reactive types."]}),"\n",(0,t.jsx)(n.h2,{id:"how-to-use-services",children:"How to use services?"}),"\n",(0,t.jsxs)(n.p,{children:["Botrino will be able to find your services automatically in your app module, as long as your module is ",(0,t.jsx)(n.code,{children:"open"})," and is\nannotated with ",(0,t.jsx)(n.code,{children:"@BotModule"}),", as explained in the ",(0,t.jsx)(n.a,{href:"/docs/getting-started",children:"Getting Started guide"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"declaring-a-service",children:"Declaring a service"}),"\n",(0,t.jsxs)(n.p,{children:["For a class to be recognized as a service, you need to annotate it with ",(0,t.jsx)(n.code,{children:"@RdiService"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@RdiService\npublic class A {\n\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["With only this code, an instance of ",(0,t.jsx)(n.code,{children:"A"})," will be created on startup. By default it assumes that a public no-arg\nconstructor exists, which is the case in the code above. But there are many ways to construct a service, and that's what\nmakes them interesting."]}),"\n",(0,t.jsx)(n.h3,{id:"injecting-a-service-in-a-constructor",children:"Injecting a service in a constructor"}),"\n",(0,t.jsxs)(n.p,{children:["Let's create another service ",(0,t.jsx)(n.code,{children:"B"}),", which injects ",(0,t.jsx)(n.code,{children:"A"})," in its constructor:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@RdiService\npublic class B {\n\n    @RdiFactory\n    public B(A a) {\n        // you can use A here\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"@RdiFactory"})," annotation is what indicates the method to create the service, with the possibility to inject other\nservices in the arguments. In this scenario, the following will happen on startup:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Botrino will find ",(0,t.jsx)(n.code,{children:"A"})," and ",(0,t.jsx)(n.code,{children:"B"})," in your module, and register them as services"]}),"\n",(0,t.jsxs)(n.li,{children:["It will see that ",(0,t.jsx)(n.code,{children:"B"})," injects ",(0,t.jsx)(n.code,{children:"A"})," in constructor, so ",(0,t.jsx)(n.code,{children:"A"})," needs to be created first before ",(0,t.jsx)(n.code,{children:"B"})," can be created"]}),"\n",(0,t.jsx)(n.li,{children:"Services are created following the dependency tree."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"injecting-a-service-in-a-static-factory",children:"Injecting a service in a static factory"}),"\n",(0,t.jsxs)(n.p,{children:["The method annotated with ",(0,t.jsx)(n.code,{children:"@RdiFactory"})," can as well be a static factory method instead of a constructor:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@RdiService\npublic class B {\n\n    private final A a;\n\n    private B(A a) {\n        this.a = a;\n    }\n\n    @RdiFactory\n    public static B create(A a) {\n        return new B(a);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["The return type of the static factory must be ",(0,t.jsx)(n.code,{children:"B"})," or a subtype of ",(0,t.jsx)(n.code,{children:"B"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"injecting-a-service-in-a-reactive-static-factory",children:"Injecting a service in a reactive static factory"}),"\n",(0,t.jsxs)(n.p,{children:["If you need to perform some reactive tasks in order to create your object, Botrino (in fact, RDI) allows you to return\na ",(0,t.jsx)(n.code,{children:"Publisher"})," of the service instead of the service itself:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@RdiService\npublic class B {\n\n    private final A a;\n\n    private B(A a) {\n        this.a = a;\n    }\n\n    @RdiFactory\n    public static Mono<B> create(A a) {\n        return Mono.fromCallable(() -> new B(a));\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this case, if ",(0,t.jsx)(n.code,{children:"B"})," is injected somewhere else, it will first subscribe to the publisher returned by the static\nfactory, and create the service only after the instance of ",(0,t.jsx)(n.code,{children:"B"})," is emitted."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Check out the ",(0,t.jsx)(n.a,{href:"https://alex1304.github.io/rdi/docs/intro",children:"RDI documentation"})," for more examples and details on how\ndependency injection works."]})}),"\n",(0,t.jsx)(n.h2,{id:"built-in-services",children:"Built-in services"}),"\n",(0,t.jsx)(n.h3,{id:"gatewaydiscordclient",children:(0,t.jsx)(n.code,{children:"GatewayDiscordClient"})}),"\n",(0,t.jsxs)(n.p,{children:["Maybe you've been wondering how to access the instance of the Discord client of your bot? Well, now you have the\nanswer: ",(0,t.jsx)(n.code,{children:"GatewayDiscordClient"})," is registered as a service, which means you can inject it in your own services!"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@RdiService\npublic class A {\n\n    @RdiFactory\n    public A(GatewayDiscordClient gateway) {\n        // you can use GatewayDiscordClient here\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configcontainer",children:(0,t.jsx)(n.code,{children:"ConfigContainer"})}),"\n",(0,t.jsxs)(n.p,{children:["To access the values of the configuration file, the service ",(0,t.jsx)(n.code,{children:"ConfigContainer"})," is registered and you can inject it in\nyour own services. For example, to get the bot token:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@RdiService\npublic class A {\n\n    @RdiFactory\n    public A(ConfigContainer configContainer) {\n        var botConfig = configContainer.get(BotConfig.class);\n        var token = botConfig.token();\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We will see the ",(0,t.jsx)(n.code,{children:"ConfigContainer"})," more in depth in the next section, ",(0,t.jsx)(n.a,{href:"/docs/api/configuring-your-bot",children:"Configuring your bot"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(6540);const s={},c=t.createContext(s);function r(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);