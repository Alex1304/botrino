"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[902],{8867:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var t=n(4848),i=n(8453);const r={title:"Cooldowns"},a=void 0,s={id:"interaction-library/cooldowns",title:"Cooldowns",description:"If your commands perform costly operations or can potentially be abused, you may want to set a limit on the number of",source:"@site/docs/interaction-library/cooldowns.mdx",sourceDirName:"interaction-library",slug:"/interaction-library/cooldowns",permalink:"/docs/interaction-library/cooldowns",draft:!1,unlisted:!1,editUrl:"https://github.com/Alex1304/botrino/edit/main/website/docs/interaction-library/cooldowns.mdx",tags:[],version:"current",frontMatter:{title:"Cooldowns"},sidebar:"someSidebar",previous:{title:"Privileges",permalink:"/docs/interaction-library/privileges"},next:{title:"Handling errors",permalink:"/docs/interaction-library/handling-errors"}},c={},d=[{value:"Set a cooldown to a command",id:"set-a-cooldown-to-a-command",level:2},{value:"Handling cooldowns",id:"handling-cooldowns",level:2}];function l(e){const o={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.p,{children:"If your commands perform costly operations or can potentially be abused, you may want to set a limit on the number of\ntimes the command can be used. The Cooldown API will allow you to deal with these situations without hassle."}),"\n",(0,t.jsx)(o.h2,{id:"set-a-cooldown-to-a-command",children:"Set a cooldown to a command"}),"\n",(0,t.jsxs)(o.p,{children:["Override the ",(0,t.jsx)(o.code,{children:"cooldown()"})," method from ",(0,t.jsx)(o.code,{children:"InteractionListener"}),", and specify the cooldown\nusing ",(0,t.jsx)(o.code,{children:"Cooldown.of(int, Duration)"}),":"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-java",children:"@Override\npublic Cooldown cooldown() {\n    return Cooldown.of(1, Duration.ofMinutes(1));\n}\n"})}),"\n",(0,t.jsxs)(o.p,{children:["The integer represents the maximum number of times the command can be executed within a timeframe, and the duration\nrepresents the timeframe itself. Therefore, this example corresponds to a cooldown of ",(0,t.jsx)(o.strong,{children:"once per minute"}),"."]}),"\n",(0,t.jsx)(o.admonition,{type:"info",children:(0,t.jsxs)(o.p,{children:["Cooldowns are applied ",(0,t.jsx)(o.strong,{children:"per user"}),". Two different users using the same command will always have their own separate usage\nlimits."]})}),"\n",(0,t.jsx)(o.h2,{id:"handling-cooldowns",children:"Handling cooldowns"}),"\n",(0,t.jsxs)(o.p,{children:["When a user reaches the maximum number of permits and attempts to use the command again, the command will fail with\na ",(0,t.jsx)(o.code,{children:"CooldownException"}),". You can handle this exception via the command error handler, which will be covered in\nthe ",(0,t.jsx)(o.a,{href:"/docs/interaction-library/handling-errors",children:"next section"}),"."]})]})}function m(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>a,x:()=>s});var t=n(6540);const i={},r=t.createContext(i);function a(e){const o=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:o},e.children)}}}]);