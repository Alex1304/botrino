"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[534],{1741:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var r=n(4848),t=n(8453);const s={title:"Privileges"},o=void 0,c={id:"interaction-library/privileges",title:"Privileges",description:"Another common use case when making commands is to be able to restrict access to some commands that should not be used",source:"@site/docs/interaction-library/privileges.mdx",sourceDirName:"interaction-library",slug:"/interaction-library/privileges",permalink:"/docs/interaction-library/privileges",draft:!1,unlisted:!1,editUrl:"https://github.com/Alex1304/botrino/edit/main/website/docs/interaction-library/privileges.mdx",tags:[],version:"current",frontMatter:{title:"Privileges"},sidebar:"someSidebar",previous:{title:"Dealing with components",permalink:"/docs/interaction-library/dealing-with-components"},next:{title:"Cooldowns",permalink:"/docs/interaction-library/cooldowns"}},a={},l=[{value:"The <code>Privilege</code> interface",id:"the-privilege-interface",level:2},{value:"Privilege presets",id:"privilege-presets",level:2},{value:"Composing privileges",id:"composing-privileges",level:2}];function d(e){const i={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.p,{children:"Another common use case when making commands is to be able to restrict access to some commands that should not be used\nby everyone. The Privilege API provides a way to conveniently implement these kind of restrictions."}),"\n",(0,r.jsx)(i.admonition,{type:"info",children:(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.a,{href:"https://discord.com/developers/docs/interactions/application-commands#permissions",children:"The permission system proposed by Discord"}),"\nis currently not yet supported by Discord4J. As such, using this Privilege API is the recommended approach until Discord\nnative permissions are fully supported. There is no plan to deprecate this feature for now."]})}),"\n",(0,r.jsxs)(i.h2,{id:"the-privilege-interface",children:["The ",(0,r.jsx)(i.code,{children:"Privilege"})," interface"]}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"Privilege"})," is a functional interface that is in charge of checking if access to the command is granted for a specific\ncontext. If granted, the abstract method of the interface returns a ",(0,r.jsx)(i.code,{children:"Mono"})," that completes empty, which signals that the\ncommand can be run normally. If not granted, the returned ",(0,r.jsx)(i.code,{children:"Mono"})," is expected to emit ",(0,r.jsx)(i.code,{children:"PrivilegeException"})," (or a subclass\nof this exception), possibly carrying details on the reason of the failure. In this case, the command execution will be\ncancelled."]}),"\n",(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.code,{children:"InteractionListener"})," superinterface, which is extended\nby ",(0,r.jsx)(i.code,{children:"ChatInputInteractionListener"}),", ",(0,r.jsx)(i.code,{children:"UserInteractionListener"}),", ",(0,r.jsx)(i.code,{children:"MessageInteractionListener"}),"\nand ",(0,r.jsx)(i.code,{children:"ComponentInteractionListener"}),", provides a ",(0,r.jsx)(i.code,{children:"privilege()"})," method that can be overriden in your command\nimplementations."]}),"\n",(0,r.jsx)(i.p,{children:'An instance of this interface can be provided via a lambda expression. The example below defines a privilege which only\ngrants users whose username starts with "A":'}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:'@Override\npublic Privilege privilege() {\n    return ctx -> Mono.justOrEmpty(ctx.event().getMessage().getAuthor())\n            .filter(author -> author.getUsername().startsWith("A"))\n            .switchIfEmpty(Mono.error(PrivilegeException::new))\n            .then();\n}\n'})}),"\n",(0,r.jsx)(i.admonition,{type:"info",children:(0,r.jsxs)(i.p,{children:["Handling ",(0,r.jsx)(i.code,{children:"PrivilegeException"})," (for example to display a user-friendly message) is documented on\nthe ",(0,r.jsx)(i.a,{href:"/docs/interaction-library/handling-errors",children:"Handling Errors"})," page."]})}),"\n",(0,r.jsx)(i.h2,{id:"privilege-presets",children:"Privilege presets"}),"\n",(0,r.jsxs)(i.p,{children:["In most cases, checking if access to a command is granted will simply consist of checking if the user has a particular\nrole or a particular permission in the guild. You can use one of the static methods of the ",(0,r.jsx)(i.code,{children:"Privileges"})," class instead of\nimplementing that yourself:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"@Override\npublic Privilege privilege() {\n    return Privileges.checkPermissions(perms -> perms.contains(ADMINISTRATOR));\n}\n"})}),"\n",(0,r.jsxs)(i.p,{children:["Check out\nthe ",(0,r.jsxs)(i.a,{href:"https://javadoc.io/doc/com.alex1304.botrino/botrino-interaction/latest/botrino.interaction/botrino/interaction/privilege/Privileges.html",children:["Javadoc for the ",(0,r.jsx)(i.code,{children:"Privileges"})," class"]}),"\nfor more presets like this one."]}),"\n",(0,r.jsx)(i.h2,{id:"composing-privileges",children:"Composing privileges"}),"\n",(0,r.jsxs)(i.p,{children:["You can compose several ",(0,r.jsx)(i.code,{children:"Privilege"})," instances by using the ",(0,r.jsx)(i.code,{children:"and()"})," and ",(0,r.jsx)(i.code,{children:"or()"})," methods:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:"@Override\npublic Privilege privilege() {\n    return Privileges.checkRoles(roles -> !roles.isEmpty())\n            .or(Privileges.guildOwner());\n}\n"})}),"\n",(0,r.jsx)(i.p,{children:'This code means "Grant if the user has at least one role OR if they are the owner of the server".'})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>c});var r=n(6540);const t={},s=r.createContext(t);function o(e){const i=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:i},e.children)}}}]);