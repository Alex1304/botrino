"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[122],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,u=d["".concat(l,".").concat(h)]||d[h]||m[h]||a;return n?i.createElement(u,o(o({ref:t},p),{},{components:n})):i.createElement(u,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},205:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return m}});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),o=["components"],s={title:"Privileges"},l={unversionedId:"interaction-library/privileges",id:"interaction-library/privileges",isDocsHomePage:!1,title:"Privileges",description:"Another common use case when making commands is to be able to restrict access to some commands that should not be used by everyone. The Privilege API provides a way to conveniently implement these kind of restrictions.",source:"@site/docs/interaction-library/privileges.md",sourceDirName:"interaction-library",slug:"/interaction-library/privileges",permalink:"/docs/interaction-library/privileges",editUrl:"https://github.com/Alex1304/botrino/edit/main/website/docs/interaction-library/privileges.md",version:"current",frontMatter:{title:"Privileges"},sidebar:"someSidebar",previous:{title:"Dealing with components",permalink:"/docs/interaction-library/dealing-with-components"},next:{title:"Cooldowns",permalink:"/docs/interaction-library/cooldowns"}},c=[{value:"The <code>Privilege</code> interface",id:"the-privilege-interface",children:[]},{value:"Privilege presets",id:"privilege-presets",children:[]},{value:"Composing privileges",id:"composing-privileges",children:[]}],p={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Another common use case when making commands is to be able to restrict access to some commands that should not be used by everyone. The Privilege API provides a way to conveniently implement these kind of restrictions."),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("a",{parentName:"p",href:"https://discord.com/developers/docs/interactions/application-commands#permissions"},"The permission system proposed by Discord")," is currently too limited for the library to support it. Until Discord offers something more flexible to handle them natively, the library will only support this homemade Privilege API."))),(0,a.kt)("h2",{id:"the-privilege-interface"},"The ",(0,a.kt)("inlineCode",{parentName:"h2"},"Privilege")," interface"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Privilege")," is a functional interface that is in charge of checking if access to the command is granted for a specific context. If granted, the abstract method of the interface returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Mono")," that completes empty, which signals that the command can be run normally. If not granted, the returned ",(0,a.kt)("inlineCode",{parentName:"p"},"Mono")," is expected to emit ",(0,a.kt)("inlineCode",{parentName:"p"},"PrivilegeException")," (or a subclass of this exception), possibly carrying details on the reason of the failure. In this case, the command execution will be cancelled."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"InteractionListener")," superinterface, which is extended by ",(0,a.kt)("inlineCode",{parentName:"p"},"ChatInputInteractionListener"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"UserInteractionListener"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"MessageInteractionListener")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ComponentInteractionListener"),", provides a ",(0,a.kt)("inlineCode",{parentName:"p"},"privilege()")," method that can be overriden in your command implementations."),(0,a.kt)("p",null,'An instance of this interface can be provided via a lambda expression. The example below defines a privilege which only grants users whose username starts with "A":'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@Override\npublic Privilege privilege() {\n    return ctx -> Mono.justOrEmpty(ctx.event().getMessage().getAuthor())\n            .filter(author -> author.getUsername().startsWith("A"))\n            .switchIfEmpty(Mono.error(PrivilegeException::new))\n            .then();\n}\n')),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Handling ",(0,a.kt)("inlineCode",{parentName:"p"},"PrivilegeException")," (for example to display a user-friendly message) is documented on the ",(0,a.kt)("a",{parentName:"p",href:"/docs/interaction-library/handling-errors"},"Handling Errors")," page."))),(0,a.kt)("h2",{id:"privilege-presets"},"Privilege presets"),(0,a.kt)("p",null,"In most cases, checking if access to a command is granted will simply consist of checking if the user has a particular role or a particular permission in the guild. You can use one of the static methods of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Privileges")," class instead of implementing that yourself:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"@Override\npublic Privilege privilege() {\n    return Privileges.checkPermissions(perms -> perms.contains(ADMINISTRATOR));\n}\n")),(0,a.kt)("p",null,"Check out the ",(0,a.kt)("a",{parentName:"p",href:"https://javadoc.io/doc/com.alex1304.botrino/botrino-interaction/latest/botrino.interaction/botrino/interaction/privilege/Privileges.html"},"Javadoc for the ",(0,a.kt)("inlineCode",{parentName:"a"},"Privileges")," class")," for more presets like this one."),(0,a.kt)("h2",{id:"composing-privileges"},"Composing privileges"),(0,a.kt)("p",null,"You can compose several ",(0,a.kt)("inlineCode",{parentName:"p"},"Privilege")," instances by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"and()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"or()")," methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"@Override\npublic Privilege privilege() {\n    return Privileges.checkRoles(roles -> !roles.isEmpty())\n            .or(Privileges.guildOwner());\n}\n")),(0,a.kt)("p",null,'This code means "Grant if the user has at least one role OR if they are the owner of the server".'))}m.isMDXComponent=!0}}]);