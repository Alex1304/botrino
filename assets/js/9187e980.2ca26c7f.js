"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[608],{2488:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var o=t(4848),i=t(8453);const r={title:"Customizing the Discord client"},s=void 0,c={id:"api/customizing-the-discord-client",title:"Customizing the Discord client",description:"When you start a project with Botrino, the Discord client is constructed for you, so you don't have anything to do in",source:"@site/docs/api/customizing-the-discord-client.mdx",sourceDirName:"api",slug:"/api/customizing-the-discord-client",permalink:"/docs/api/customizing-the-discord-client",draft:!1,unlisted:!1,editUrl:"https://github.com/Alex1304/botrino/edit/main/website/docs/api/customizing-the-discord-client.mdx",tags:[],version:"current",frontMatter:{title:"Customizing the Discord client"},sidebar:"someSidebar",previous:{title:"Configuring your bot",permalink:"/docs/api/configuring-your-bot"},next:{title:"Extensions",permalink:"/docs/api/extensions"}},a={},d=[{value:"The <code>LoginHandler</code> interface",id:"the-loginhandler-interface",level:2}];function l(e){const n={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"When you start a project with Botrino, the Discord client is constructed for you, so you don't have anything to do in\norder to run the bot. However, in most cases, you will want to take full control on how the Discord client is created.\nThis section will show you how to fully customize the Discord client and the gateway login process."}),"\n",(0,o.jsxs)(n.h2,{id:"the-loginhandler-interface",children:["The ",(0,o.jsx)(n.code,{children:"LoginHandler"})," interface"]}),"\n",(0,o.jsxs)(n.p,{children:["All you need to do is to provide one implementation of the ",(0,o.jsx)(n.code,{children:"LoginHandler"})," interface. It defines one\nmethod, ",(0,o.jsx)(n.code,{children:"Mono<GatewayDiscordClient> login(ConfigContainer configContainer)"}),", that you can override to define yourself\nhow your bot connects to the Discord gateway. The default implementation of this method builds the Discord client with\ndefault settings, using the token, presence status, and intents from the configuration. It can be recreated like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"package com.example.myproject;\n\nimport botrino.api.config.object.BotConfig;\nimport discord4j.core.DiscordClient;\nimport discord4j.core.GatewayDiscordClient;\nimport discord4j.core.object.presence.Presence;\nimport discord4j.core.shard.MemberRequestFilter;\nimport discord4j.gateway.intent.IntentSet;\nimport reactor.core.publisher.Mono;\n\npublic final class DefaultLoginHandler implements LoginHandler {\n\n    @Override\n    public Mono<GatewayDiscordClient> login(ConfigContainer configContainer) {\n        var config = configContainer.get(BotConfig.class);\n        var discordClient = DiscordClient.create(config.token());\n        return discordClient.gateway()\n                .setInitialStatus(shard -> config.presence()\n                        .map(BotConfig.StatusConfig::toStatusUpdate)\n                        .orElseGet(Presence::online))\n                .setEnabledIntents(config.enabledIntents().stream().boxed()\n                        .map(IntentSet::of)\n                        .findAny()\n                        .orElseGet(IntentSet::nonPrivileged))\n                .setMemberRequestFilter(MemberRequestFilter.none())\n                .login()\n                .single();\n    }\n}\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"caution",children:(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"The implementation class must have a no-arg constructor."}),"\n",(0,o.jsxs)(n.li,{children:["If more than one implementation of ",(0,o.jsx)(n.code,{children:"LoginHandler"})," are found, it will result in an error as it is impossible to\ndetermine which one to use. If you don't want to remove the extra implementation(s), you can mark one of them with\nthe ",(0,o.jsx)(n.code,{children:"@Primary"})," annotation to lift the ambiguity. You may alternatively use the ",(0,o.jsx)(n.code,{children:"@Exclude"})," annotation if you don't want\none implementation to be picked up by Botrino."]}),"\n"]})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var o=t(6540);const i={},r=o.createContext(i);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);