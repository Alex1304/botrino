"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[450],{8814:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var i=t(4848),r=t(8453);const o={title:"Filtering and adapting events"},a=void 0,s={id:"interaction-library/filtering-and-adapting-events",title:"Filtering and adapting events",description:"Listeners are triggered when an interaction event is received via the Discord gateway. It is possible for you to",source:"@site/docs/interaction-library/filtering-and-adapting-events.mdx",sourceDirName:"interaction-library",slug:"/interaction-library/filtering-and-adapting-events",permalink:"/docs/interaction-library/filtering-and-adapting-events",draft:!1,unlisted:!1,editUrl:"https://github.com/Alex1304/botrino/edit/main/website/docs/interaction-library/filtering-and-adapting-events.mdx",tags:[],version:"current",frontMatter:{title:"Filtering and adapting events"},sidebar:"someSidebar",previous:{title:"Handling errors",permalink:"/docs/interaction-library/handling-errors"}},c={},l=[{value:"The <code>InteractionEventProcessor</code> interface",id:"the-interactioneventprocessor-interface",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Listeners are triggered when an interaction event is received via the Discord gateway. It is possible for you to\nintervene between the moment the event is received and the moment the listener is triggered. This allows you to drop\nsome events to prevent any command from being executed in a certain context, or to determine which locale to apply\naccording to the event received."}),"\n",(0,i.jsxs)(n.h2,{id:"the-interactioneventprocessor-interface",children:["The ",(0,i.jsx)(n.code,{children:"InteractionEventProcessor"})," interface"]}),"\n",(0,i.jsxs)(n.p,{children:["Create a class that implements ",(0,i.jsx)(n.code,{children:"InteractionEventProcessor"}),". If you are using the Botrino framework, it will\nautomatically be set into the interaction service. Otherwise, you need to set it via the builder when constructing\nyour ",(0,i.jsx)(n.code,{children:"InteractionService"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"final var interactionService = InteractionService.builder(config, gateway)\n        .setEventProcessor(new MyEventProcessor())\n        .build();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here is an example of ",(0,i.jsx)(n.code,{children:"InteractionEventProcessor"})," implementation:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package testbot1;\n\nimport botrino.interaction.InteractionEventProcessor;\nimport discord4j.core.event.domain.interaction.InteractionCreateEvent;\nimport discord4j.core.object.entity.channel.GuildMessageChannel;\nimport reactor.core.publisher.Mono;\n\nimport java.util.Locale;\n\npublic final class MyEventProcessor implements InteractionEventProcessor {\n\n    @Override\n    public Mono<Boolean> filter(InteractionCreateEvent event) {\n        return Mono.just(!event.getInteraction().getMember()\n                .map(member -> member.getDisplayName().toLowerCase().contains("ignore me"))\n                .orElse(true));\n    }\n\n    @Override\n    public Mono<Locale> computeLocale(InteractionCreateEvent event) {\n        return event.getInteraction().getChannel()\n                .ofType(GuildMessageChannel.class)\n                .flatMap(guildChannel -> {\n                    if (guildChannel.getName().endsWith("fr")) {\n                        return Mono.just(Locale.FRENCH);\n                    } else if (guildChannel.getName().endsWith("de")) {\n                        return Mono.just(Locale.GERMAN);\n                    } else {\n                        return Mono.empty();\n                    }\n                });\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"filter(InteractionCreateEvent)"})," allows to decide whether to keep or to drop the given ",(0,i.jsx)(n.code,{children:"InteractionCreateEvent"}),'. The\ndefault implementation will allow all events. This method can be useful if you want to implement a blacklist system to\nban some users from using your bot. In this example, we are filtering out users which username contains the string "\nignore me".']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"computeLocale(InteractionCreateEvent)"})," allows to adapt the locale according to the event received. In order to keep\nthe default locale, you are expected to return an empty ",(0,i.jsx)(n.code,{children:"Mono"}),". The returned locale will be accessible via\nthe ",(0,i.jsx)(n.code,{children:"InteractionContext"})," (which implements ",(0,i.jsx)(n.code,{children:"botrino.api.Translator"}),", see ",(0,i.jsx)(n.a,{href:"/docs/api/i18n",children:"Internationalization"}),"). You\nwill typically store the locale in a database (either per guild or per user) and retrieve it here using the data given\nby the interaction event. In this example, we are interpreting the suffix of the channel name as the locale, with only\nFrench and German being supported. It will use the default locale defined in the ",(0,i.jsx)(n.a,{href:"/docs/interaction-library/configuration",children:"configuration"})," in\nall other cases."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"Considerations when using the Botrino framework",type:"caution",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The implementation class must have a no-arg constructor."}),"\n",(0,i.jsxs)(n.li,{children:["If more than one implementation of ",(0,i.jsx)(n.code,{children:"InteractionEventProcessor"})," are found, it will result in an error as it is\nimpossible to determine which one to use. If you don't want to remove the extra implementation(s), you can mark one of\nthem with the ",(0,i.jsx)(n.code,{children:"@Primary"})," annotation to lift the ambiguity. You may alternatively use the ",(0,i.jsx)(n.code,{children:"@Exclude"})," annotation if you\ndon't want one implementation to be picked up by Botrino."]}),"\n"]})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(6540);const r={},o=i.createContext(r);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);